# Copy and paste these commands one by one into Claude Code CLI

zen analyze --model gemini-2.5-flash "Analyze the token optimization architecture in this codebase. Focus on the two-stage approach, mode selection logic, and telemetry system. Include files: server.py, tools/mode_selector.py, token_optimization_config.py"

zen secaudit --model grok-code-fast-1 "Perform security audit of the MCP server focusing on: TCP transport security, Docker container isolation, API key handling, and input validation."

zen debug --model o3-mini --confidence exploring "Investigate potential performance bottlenecks in the token optimization system. Analyze the two-stage execution flow, Redis conversation memory, and provider selection logic."

zen codereview --model gemini-2.5-flash "Review the token optimization implementation for code quality, maintainability, and best practices. Focus on server_token_optimized.py, tools/mode_executor.py, and the overall integration."

zen refactor --model grok-code-fast-1 "Suggest refactoring opportunities for the MCP server architecture to improve modularity, reduce coupling, and enhance testability. Consider the provider system and tool registration."

zen testgen --model o3-mini "Generate comprehensive test strategy for token optimization feature including unit tests, integration tests, and A/B testing validation. Focus on edge cases and error scenarios."

zen debug --model gemini-2.5-flash --confidence exploring "Debug why the Docker dual-transport mode occasionally restarts. Analyze server.py transport logic, Docker configuration, and error handling patterns."

zen consensus "Should we implement WebSocket transport in addition to TCP and stdio? Consider: performance implications, client complexity, Docker networking, and maintenance overhead."

zen thinkdeep --model grok-code-fast-1 --confidence high "Investigate the optimal token budget allocation strategy for different model types. Consider context windows, pricing, response quality, and conversation threading requirements."